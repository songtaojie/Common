<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hx.Core</name>
    </assembly>
    <members>
        <member name="T:Hx.Core.App">
            <summary>
            全局应用类
            </summary>
        </member>
        <member name="F:Hx.Core.App.Assemblies">
            <summary>
            应用有效程序集
            </summary>
        </member>
        <member name="F:Hx.Core.App.EffectiveTypes">
            <summary>
            有效程序集类型
            </summary>
        </member>
        <member name="F:Hx.Core.App._settings">
            <summary>
            私有设置，避免重复解析
            </summary>
        </member>
        <member name="P:Hx.Core.App.Settings">
            <summary>
            应用全局配置
            </summary>
        </member>
        <member name="M:Hx.Core.App.GetService``1(System.IServiceProvider)">
            <summary>
            获取请求生命周期的服务
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="scoped"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.App.GetService(System.Type,System.IServiceProvider)">
            <summary>
            获取请求生命周期的服务
            </summary>
            <param name="type"></param>
            <param name="scoped"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.App.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            获取请求生命周期的服务
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="scoped"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.App.GetRequiredService(System.Type,System.IServiceProvider)">
            <summary>
            获取请求生命周期的服务
            </summary>
            <param name="type"></param>
            <param name="scoped"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.App.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Hx.Core.App.GetAssemblies">
            <summary>
            获取应用有效程序集
            </summary>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Hx.Core.App.GetConnectionString(System.String)">
            <summary>
            获取连接字符串
            </summary>
            <param name="name">ConnectionStrings节点中子节点名字</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.App.GetConfig``1(System.String)">
            <summary>
            获取配置
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="jsonKey">配置中对应的Key</param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Hx.Core.App.GetOptions``1(System.IServiceProvider)">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="scoped"></param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Hx.Core.App.GetOptionsMonitor``1(System.IServiceProvider)">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="scoped"></param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Hx.Core.App.GetOptionsSnapshot``1(System.IServiceProvider)">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="scoped"></param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Hx.Core.App.GetConfig(System.String[])">
            <summary>
            封装要操作的字符
            </summary>
            <param name="sections">配置节点</param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.AppExtend">
            <summary>
            App扩展
            </summary>
        </member>
        <member name="F:Hx.Core.AppExtend.DependencyInjection">
            <summary>
            Hx.DependencyInjection依赖注入包
            </summary>
        </member>
        <member name="F:Hx.Core.AppExtend.DatabaseAccessor">
            <summary>
            Hx.DatabaseAccessor数据访问注入包
            </summary>
        </member>
        <member name="F:Hx.Core.AppExtend.Swagger">
            <summary>
            Hx.Swagger文档包
            </summary>
        </member>
        <member name="F:Hx.Core.AppExtend.EventBus">
            <summary>
            Hx.EventBus事件总线包
            </summary>
        </member>
        <member name="T:Hx.Core.HxAppStartupFilter">
            <summary>
            应用启动时自动注册中间件
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Hx.Core.HxAppStartupFilter.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            配置中间件
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.Internal.InternalApp">
            <summary>
            内部 App 副本
            </summary>
        </member>
        <member name="F:Hx.Core.Internal.InternalApp.InternalServices">
            <summary>
            应用服务
            </summary>
        </member>
        <member name="F:Hx.Core.Internal.InternalApp.Configuration">
            <summary>
            配置对象
            </summary>
        </member>
        <member name="F:Hx.Core.Internal.InternalApp.WebHostEnvironment">
            <summary>
            获取Web主机环境
            </summary>
        </member>
        <member name="F:Hx.Core.Internal.InternalApp.HostEnvironment">
            <summary>
            获取泛型主机环境
            </summary>
        </member>
        <member name="F:Hx.Core.Internal.InternalApp.RootServices">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Hx.Core.Internal.InternalApp.AddConfigureFiles(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
            添加配置文件
            </summary>
            <param name="configurationBuilder"></param>
            <param name="hostEnvironment"></param>
        </member>
        <member name="F:Hx.Core.Internal.InternalApp.excludeJsonPattern">
            <summary>
            排除特定配置文件正则表达式
            </summary>
        </member>
        <member name="F:Hx.Core.Internal.InternalApp.excludeJsonPrefixs">
            <summary>
            排序的配置文件前缀
            </summary>
        </member>
        <member name="F:Hx.Core.Internal.InternalApp.runtimeJsonSuffixs">
            <summary>
            排除运行时 Json 后缀
            </summary>
        </member>
        <member name="M:Hx.Core.Internal.InternalApp.SplitConfigFileNameToGroups(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            对配置文件名进行分组
            </summary>
            <param name="configFiles"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.Internal.UserContext">
            <summary>
            用户上下文操作类
            </summary>
        </member>
        <member name="F:Hx.Core.Internal.UserContext._isUseIds4">
            <summary>
            是否使用IdentityServer4
            </summary>
        </member>
        <member name="F:Hx.Core.Internal.UserContext._contextAccessor">
            <summary>
            HttpContext访问器
            </summary>
        </member>
        <member name="P:Hx.Core.Internal.UserContext.UserName">
            <summary>
            用户的名字
            </summary>
        </member>
        <member name="P:Hx.Core.Internal.UserContext.IsSuperAdmin">
            <summary>
            是否是超级管理员
            </summary>
        </member>
        <member name="P:Hx.Core.Internal.UserContext.IsAdmin">
            <summary>
            是否是管理员
            </summary>
        </member>
        <member name="P:Hx.Core.Internal.UserContext.JwtId">
            <summary>
            Jwt的id
            </summary>
        </member>
        <member name="P:Hx.Core.Internal.UserContext.UserId">
            <summary>
            用户的id
            </summary>
        </member>
        <member name="M:Hx.Core.Internal.UserContext.GetCookieValue(System.String)">
            <summary>
            获取cookie的值
            </summary>
            <param name="cookieName"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.Internal.UserContext.SetCookieValue(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            设置cookie的值
            </summary>
            <param name="cookieName"></param>
            <param name="value"></param>
            <param name="expires">过期时间</param>
        </member>
        <member name="P:Hx.Core.Internal.UserContext.IsAuthenticated">
            <summary>
            是否已经验证，即是否一登录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.Internal.UserContext.GetToken">
            <summary>
            获取token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.Internal.UserContext.GetClaimsIdentity">
            <summary>
            获取claims集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.Internal.UserContext.GetClaimValueByType(System.String)">
            <summary>
            根据claim获取相应的值
            </summary>
            <param name="ClaimType"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.Internal.WebManager">
            <summary>
            Web管理类
            </summary>
        </member>
        <member name="M:Hx.Core.Internal.WebManager.#ctor(Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
            web帮助类
            </summary>
            <param name="env"></param>
        </member>
        <member name="P:Hx.Core.Internal.WebManager.WebRootPath">
            <summary>
            web应用程序根路径
            </summary>
        </member>
        <member name="P:Hx.Core.Internal.WebManager.ContentRootPath">
            <summary>
            web应用程序根路径
            </summary>
        </member>
        <member name="M:Hx.Core.Internal.WebManager.ToRelativePath(System.String)">
            <summary>
            把绝对路径转换成相对路径
            </summary>
            <param name="absolutePath">绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.Internal.WebManager.ToAbsolutePath(System.String)">
            <summary>
            把相对路径转换成绝对路径
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.Internal.WebManager.GetFullUrl(System.String,System.String)">
            <summary>
            获取路由的全路径
            </summary>
            <param name="host">网站host</param>
            <param name="routeUrl"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.AppSettingsOptions">
            <summary>
            应用全局配置
            </summary>
        </member>
        <member name="P:Hx.Core.AppSettingsOptions.EnabledSwagger">
            <summary>
            是否启用规范化文档Swagger
            </summary>
        </member>
        <member name="P:Hx.Core.AppSettingsOptions.SwaggerUI">
            <summary>
            swagger配置
            </summary>
        </member>
        <member name="P:Hx.Core.AppSettingsOptions.PrintDbConnectionInfo">
            <summary>
            是否打印数据库连接信息到 MiniProfiler 中
            </summary>
        </member>
        <member name="P:Hx.Core.AppSettingsOptions.UseIdentityServer4">
            <summary>
            是否使用IdentityServer4授权认证，false：使用jwt授权认证
            </summary>
        </member>
        <member name="P:Hx.Core.AppSettingsOptions.EnabledUnifyResult">
            <summary>
            是否启用规范化结果
            </summary>
        </member>
        <member name="P:Hx.Core.AppSettingsOptions.EnabledCap">
            <summary>
            是否启用事件总线
            </summary>
        </member>
        <member name="P:Hx.Core.AppSettingsOptions.EnabledExceptionFilter">
            <summary>
            是否开启全局异常过滤器
            </summary>
        </member>
        <member name="P:Hx.Core.AppSettingsOptions.EnabledSqlLog">
            <summary>
            是否开启sql日志记录
            </summary>
        </member>
        <member name="P:Hx.Core.AppSettingsOptions.EnabledCors">
            <summary>
            是否开启跨域
            </summary>
        </member>
        <member name="M:Hx.Core.AppSettingsOptions.PostConfigure(System.String,Hx.Core.AppSettingsOptions)">
            <summary>
            后期配置
            </summary>
            <param name="name"></param>
            <param name="options"></param>
        </member>
        <member name="T:Hx.Core.SwaggerUIEnum">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hx.Core.SwaggerUIEnum.Original">
            <summary>
            原生ui的swagger
            </summary>
        </member>
        <member name="F:Hx.Core.SwaggerUIEnum.Knife4">
            <summary>
            使用Knife4UI的swagger
            </summary>
        </member>
        <member name="T:Hx.Core.OptionsRuleAttribute">
            <summary>
            选项配置特性
            </summary>
        </member>
        <member name="M:Hx.Core.OptionsRuleAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Hx.Core.OptionsRuleAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="postConfigureAll">启动所有实例进行后期配置</param>
        </member>
        <member name="M:Hx.Core.OptionsRuleAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="jsonKey">appsetting.json 对应键</param>
            <param name="postConfigureAll">启动所有实例进行后期配置</param>
        </member>
        <member name="P:Hx.Core.OptionsRuleAttribute.JsonKey">
            <summary>
            对应配置文件中的Key
            </summary>
        </member>
        <member name="P:Hx.Core.OptionsRuleAttribute.PostConfigureAll">
            <summary>
            对所有配置实例进行后期配置
            </summary>
        </member>
        <member name="T:Hx.Core.HxWebHostingStartup">
            <summary>
            配置程序启动时自动注入
            </summary>
        </member>
        <member name="M:Hx.Core.HxWebHostingStartup.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            配置应用启动
            </summary>
            <param name="webHostBuilder"></param>
        </member>
        <member name="T:Hx.Core.CommonConst">
            <summary>
            常量
            </summary>
        </member>
        <member name="F:Hx.Core.CommonConst.Access_Token">
            <summary>
            值access-token
            </summary>
        </member>
        <member name="F:Hx.Core.CommonConst.XAccessToken">
            <summary>
            值x-access-token
            </summary>
        </member>
        <member name="T:Hx.Core.DateTimeConverter">
            <summary>
            时间格式化
            </summary>
        </member>
        <member name="M:Hx.Core.DateTimeConverter.#ctor">
            <summary>
            时间格式化
            使用内置的时间格式化
            </summary>
        </member>
        <member name="M:Hx.Core.DateTimeConverter.#ctor(System.String)">
            <summary>
            时间格式化
            </summary>
            <param name="format">格式化字符串</param>
        </member>
        <member name="P:Hx.Core.DateTimeConverter.DateTimeFormat">
            <summary>
            获取或设置DateTime格式
            <para>默认为: yyyy-MM-dd HH:mm:ss</para>
            </summary>           
        </member>
        <member name="M:Hx.Core.DateTimeConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.DateTimeConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Hx.Core.DateTimeNullConverter">
            <summary>
            可空的时间格式化
            </summary>
        </member>
        <member name="M:Hx.Core.DateTimeNullConverter.#ctor">
            <summary>
            时间格式化
            使用内置的时间格式化
            </summary>
        </member>
        <member name="M:Hx.Core.DateTimeNullConverter.#ctor(System.String)">
            <summary>
            时间格式化
            </summary>
            <param name="format">格式化字符串</param>
        </member>
        <member name="P:Hx.Core.DateTimeNullConverter.DateTimeFormat">
            <summary>
             获取或设置DateTime格式
             <para>默认为: yyyy-MM-dd HH:mm:ss</para>
            </summary>
        </member>
        <member name="M:Hx.Core.DateTimeNullConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.DateTimeNullConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.DateTime},System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Hx.Core.CorsAccessor.CorsAccessorSettingsOptions">
            <summary>
            跨域配置选项
            </summary>
        </member>
        <member name="P:Hx.Core.CorsAccessor.CorsAccessorSettingsOptions.PolicyName">
            <summary>
            策略名称
            </summary>
        </member>
        <member name="P:Hx.Core.CorsAccessor.CorsAccessorSettingsOptions.WithOrigins">
            <summary>
            允许来源域名，没有配置则允许所有来源
            </summary>
        </member>
        <member name="P:Hx.Core.CorsAccessor.CorsAccessorSettingsOptions.WithHeaders">
            <summary>
            请求表头，没有配置则允许所有表头
            </summary>
        </member>
        <member name="P:Hx.Core.CorsAccessor.CorsAccessorSettingsOptions.WithExposedHeaders">
            <summary>
            响应标头
            </summary>
        </member>
        <member name="P:Hx.Core.CorsAccessor.CorsAccessorSettingsOptions.WithMethods">
            <summary>
            设置跨域允许请求谓词，没有配置则允许所有
            </summary>
        </member>
        <member name="P:Hx.Core.CorsAccessor.CorsAccessorSettingsOptions.AllowCredentials">
            <summary>
            跨域请求中的凭据
            </summary>
        </member>
        <member name="P:Hx.Core.CorsAccessor.CorsAccessorSettingsOptions.SetPreflightMaxAge">
            <summary>
            设置预检过期时间
            </summary>
        </member>
        <member name="P:Hx.Core.CorsAccessor.CorsAccessorSettingsOptions.FixedToken">
            <summary>
            修正前端无法获取 Token 问题
            </summary>
        </member>
        <member name="P:Hx.Core.CorsAccessor.CorsAccessorSettingsOptions.EnabledSignalR">
            <summary>
            启用 SignalR 跨域支持
            </summary>
        </member>
        <member name="M:Hx.Core.CorsAccessor.CorsAccessorSettingsOptions.PostConfigure(System.String,Hx.Core.CorsAccessor.CorsAccessorSettingsOptions)">
            <summary>
            后期配置
            </summary>
            <param name="name"></param>
            <param name="options"></param>
        </member>
        <member name="T:Hx.Core.DataEncryption.AESEncryption">
            <summary>
            AES 加解密
            </summary>
        </member>
        <member name="M:Hx.Core.DataEncryption.AESEncryption.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="text">加密文本</param>
            <param name="skey">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.AESEncryption.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="hash">加密后字符串</param>
            <param name="skey">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.AESEncryption.Encrypt(System.Byte[],System.String)">
            <summary>
            加密
            </summary>
            <param name="bytes">源文件 字节数组</param>
            <param name="skey">密钥</param>
            <returns>加密后的字节数组</returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.AESEncryption.Decrypt(System.Byte[],System.String)">
            <summary>
            解密
            </summary>
            <param name="bytes">加密后文件 字节数组</param>
            <param name="skey">密钥</param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.DataEncryption.DESCEncryption">
            <summary>
            DESC 加解密
            </summary>
        </member>
        <member name="M:Hx.Core.DataEncryption.DESCEncryption.Encrypt(System.String,System.String,System.Boolean)">
            <summary>
            加密
            </summary>
            <param name="text">加密文本</param>
            <param name="skey">密钥</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.DESCEncryption.Decrypt(System.String,System.String,System.Boolean)">
            <summary>
            解密
            </summary>
            <param name="hash">加密后字符串</param>
            <param name="skey">密钥</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.DataEncryption.MD5Encryption">
            <summary>
            MD5 加密
            </summary>
        </member>
        <member name="M:Hx.Core.DataEncryption.MD5Encryption.Compare(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            MD5 比较
            </summary>
            <param name="text">加密文本</param>
            <param name="hash">MD5 字符串</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>bool</returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.MD5Encryption.Encrypt(System.String,System.Boolean,System.Boolean)">
            <summary>
            MD5 加密
            </summary>
            <param name="text">加密文本</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.MD5Encryption.Encrypt(System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            MD5 加密
            </summary>
            <param name="bytes">字节数组</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.MD5Encryption.Compare(System.Byte[],System.String,System.Boolean,System.Boolean)">
            <summary>
            MD5 比较
            </summary>
            <param name="bytes">字节数组</param>
            <param name="hash">MD5 字符串</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>bool</returns>
        </member>
        <member name="T:Hx.Core.DataEncryption.RSAEncryption">
            <summary>
            RSA 加密
            </summary>
        </member>
        <member name="M:Hx.Core.DataEncryption.RSAEncryption.GenerateSecretKey(System.Int32)">
            <summary>
            生成 RSA 秘钥
            </summary>
            <param name="keySize">大小必须为 2048 到 16384 之间，且必须能被 8 整除</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.RSAEncryption.Encrypt(System.String,System.String,System.Int32)">
            <summary>
            加密
            </summary>
            <param name="text">明文内容</param>
            <param name="publicKey">公钥</param>
            <param name="keySize"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.RSAEncryption.Decrypt(System.String,System.String,System.Int32)">
            <summary>
            解密
            </summary>
            <param name="text">密文内容</param>
            <param name="privateKey">私钥</param>
            <param name="keySize"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.RSAEncryption.CheckRSAKeySize(System.Int32)">
            <summary>
            检查 RSA 长度
            </summary>
            <param name="keySize"></param>
        </member>
        <member name="T:Hx.Core.DataEncryption.StringEncryptionExtensions">
            <summary>
            DataEncryption 字符串加密拓展
            </summary>
        </member>
        <member name="M:Hx.Core.DataEncryption.StringEncryptionExtensions.ToMD5Encrypt(System.String,System.Boolean,System.Boolean)">
            <summary>
            字符串的 MD5 加密
            </summary>
            <param name="text"></param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>string</returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.StringEncryptionExtensions.ToMD5Compare(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            字符串的 MD5 对比
            </summary>
            <param name="text"></param>
            <param name="hash"></param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>string</returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.StringEncryptionExtensions.ToMD5Encrypt(System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            字节数组的 MD5 加密
            </summary>
            <param name="bytes"></param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>string</returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.StringEncryptionExtensions.ToMD5Compare(System.Byte[],System.String,System.Boolean,System.Boolean)">
            <summary>
            字节数组的 MD5 对比
            </summary>
            <param name="bytes"></param>
            <param name="hash"></param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>string</returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.StringEncryptionExtensions.ToAESEncrypt(System.String,System.String)">
            <summary>
            字符串 AES 加密
            </summary>
            <param name="text">需要加密的字符串</param>
            <param name="skey"></param>
            <returns>string</returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.StringEncryptionExtensions.ToAESDecrypt(System.String,System.String)">
            <summary>
            字符串 AES 解密
            </summary>
            <param name="text"></param>
            <param name="skey"></param>
            <returns>string</returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.StringEncryptionExtensions.ToAESEncrypt(System.Byte[],System.String)">
            <summary>
            字节数组（文件） AES 加密
            </summary>
            <param name="bytes"></param>
            <param name="skey"></param>
            <returns>string</returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.StringEncryptionExtensions.ToAESDecrypt(System.Byte[],System.String)">
            <summary>
            字节数组（文件） AES 解密
            </summary>
            <param name="bytes"></param>
            <param name="skey"></param>
            <returns>string</returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.StringEncryptionExtensions.ToDESCEncrypt(System.String,System.String,System.Boolean)">
            <summary>
            字符串 DESC 加密
            </summary>
            <param name="text">需要加密的字符串</param>
            <param name="skey">密钥</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns>string</returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.StringEncryptionExtensions.ToDESCDecrypt(System.String,System.String,System.Boolean)">
            <summary>
            字符串 DESC 解密
            </summary>
            <param name="text"></param>
            <param name="skey">密钥</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns>string</returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.StringEncryptionExtensions.ToRSAEncrpyt(System.String,System.String)">
            <summary>
            字符串 RSA 加密
            </summary>
            <param name="text">需要加密的文本</param>
            <param name="publicKey">公钥</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.DataEncryption.StringEncryptionExtensions.ToRSADecrypt(System.String,System.String)">
            <summary>
            字符串 RSA 解密
            </summary>
            <param name="text">需要解密的文本</param>
            <param name="privateKey">私钥</param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.FriendlyException.UserFriendlyException">
            <summary>
            用户友好的异常提示
            </summary>
        </member>
        <member name="M:Hx.Core.FriendlyException.UserFriendlyException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Hx.Core.FriendlyException.UserFriendlyException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Hx.Core.FriendlyException.UserFriendlyException.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:Hx.Core.FriendlyException.UserFriendlyException.#ctor(System.String,System.Object,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:Hx.Core.FriendlyException.UserFriendlyException.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Hx.Core.FriendlyException.UserFriendlyException.ErrorMessage">
            <summary>
            错误消息（支持 Object 对象）
            </summary>
        </member>
        <member name="P:Hx.Core.FriendlyException.UserFriendlyException.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Hx.Core.FriendlyException.UserFriendlyException.Data">
            <summary>
            结果数据
            </summary>
        </member>
        <member name="T:Hx.Core.FriendlyException.DefaultGlobalExceptionHandler">
            <summary>
            默认的异常处理
            </summary>
        </member>
        <member name="T:Hx.Core.FriendlyException.IGlobalExceptionHandler">
            <summary>
            全局异常处理接口
            </summary>
        </member>
        <member name="M:Hx.Core.FriendlyException.IGlobalExceptionHandler.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.FriendlyException.BadPageResult">
            <summary>
            错误页面
            </summary>
        </member>
        <member name="M:Hx.Core.FriendlyException.BadPageResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Hx.Core.FriendlyException.BadPageResult.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="statusCode">状态码</param>
        </member>
        <member name="P:Hx.Core.FriendlyException.BadPageResult.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Hx.Core.FriendlyException.BadPageResult.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Hx.Core.FriendlyException.BadPageResult.Base64Icon">
            <summary>
            图标
            </summary>
            <remarks>必须是 base64 类型</remarks>
        </member>
        <member name="P:Hx.Core.FriendlyException.BadPageResult.Code">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="P:Hx.Core.FriendlyException.BadPageResult.CodeLang">
            <summary>
            错误代码语言
            </summary>
        </member>
        <member name="P:Hx.Core.FriendlyException.BadPageResult.Status401Unauthorized">
            <summary>
            返回通用 401 错误页
            </summary>
        </member>
        <member name="P:Hx.Core.FriendlyException.BadPageResult.Status403Forbidden">
            <summary>
            返回通用 403 错误页
            </summary>
        </member>
        <member name="P:Hx.Core.FriendlyException.BadPageResult.Status404NotFound">
            <summary>
            返回通用 404 错误页
            </summary>
        </member>
        <member name="P:Hx.Core.FriendlyException.BadPageResult.Status500InternalServerError">
            <summary>
            返回通用 500 错误页
            </summary>
        </member>
        <member name="M:Hx.Core.FriendlyException.BadPageResult.ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            重写返回结果
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Hx.Core.FriendlyException.BadPageResult.ToString">
            <summary>
            将 <see cref="T:Hx.Core.FriendlyException.BadPageResult"/> 转换成字符串
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Hx.Core.FriendlyException.BadPageResult.ToByteArray">
            <summary>
            将 <see cref="T:Hx.Core.FriendlyException.BadPageResult"/> 转换成字节数组
            </summary>
            <returns><see cref="T:System.Byte"/></returns>
        </member>
        <member name="T:Hx.Core.NonUnifyAttribute">
            <summary>
            禁止规范化处理
            </summary>
        </member>
        <member name="T:Hx.Core.UnifyResultModelAttribute">
            <summary>
            规范化模型特性
            </summary>
        </member>
        <member name="M:Hx.Core.UnifyResultModelAttribute.#ctor(System.Type)">
            <summary>
            规范化模型
            </summary>
            <param name="modelType">模型的类型</param>
        </member>
        <member name="P:Hx.Core.UnifyResultModelAttribute.ModelType">
            <summary>
            模型类型
            </summary>
        </member>
        <member name="T:Hx.Core.RESTfulResult`1">
            <summary>
            RESTful 风格结果集,泛型结果集
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Hx.Core.RESTfulResult`1.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Hx.Core.RESTfulResult`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Hx.Core.RESTfulResult`1.Succeeded">
            <summary>
            执行成功
            </summary>
        </member>
        <member name="P:Hx.Core.RESTfulResult`1.Message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Hx.Core.RESTfulResult`1.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="T:Hx.Core.UnifyResultStatusCodesMiddleware">
            <summary>
            状态码中间件
            </summary>
        </member>
        <member name="F:Hx.Core.UnifyResultStatusCodesMiddleware._next">
            <summary>
            请求委托
            </summary>
        </member>
        <member name="M:Hx.Core.UnifyResultStatusCodesMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Hx.Core.UnifyResultStatusCodesMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            中间件执行方法
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.ExceptionMetadata">
            <summary>
            异常元数据
            </summary>
        </member>
        <member name="P:Hx.Core.ExceptionMetadata.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Hx.Core.ExceptionMetadata.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Hx.Core.ExceptionMetadata.Errors">
            <summary>
            错误对象（信息）
            </summary>
        </member>
        <member name="P:Hx.Core.ExceptionMetadata.ErrorMessage">
            <summary>
            错误对象（信息）
            </summary>
        </member>
        <member name="P:Hx.Core.ExceptionMetadata.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:Hx.Core.IUnifyResultProvider">
            <summary>
            规范化结果提供器
            </summary>
        </member>
        <member name="M:Hx.Core.IUnifyResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Hx.Core.ExceptionMetadata)">
            <summary>
            异常返回值
            </summary>
            <param name="context"></param>
            <param name="metadata">异常元数据</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.IUnifyResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)">
            <summary>
            成功返回值
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.IUnifyResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            拦截返回状态码
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.RESTfulResultProvider">
            <summary>
            RESTful 风格返回值
            </summary>
        </member>
        <member name="M:Hx.Core.RESTfulResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Hx.Core.ExceptionMetadata)">
            <summary>
            异常返回值
            </summary>
            <param name="context"></param>
            <param name="metadata">异常元数据</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.RESTfulResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)">
            <summary>
            成功返回值
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.RESTfulResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            拦截返回状态码
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.UnifyResultContext">
            <summary>
            规范化结果上下文
            </summary>
        </member>
        <member name="F:Hx.Core.UnifyResultContext.IsEnabledUnifyHandle">
            <summary>
            是否启用规范化结果
            </summary>
        </member>
        <member name="F:Hx.Core.UnifyResultContext.RESTfulResultType">
            <summary>
            规范化结果类型
            </summary>
        </member>
        <member name="F:Hx.Core.UnifyResultContext.UnifyResultExtrasKey">
            <summary>
            规范化结果额外数据键
            </summary>
        </member>
        <member name="F:Hx.Core.UnifyResultContext.UnifyResultStatusCodeKey">
            <summary>
            规范化结果状态码
            </summary>
        </member>
        <member name="M:Hx.Core.UnifyResultContext.GetExceptionMetadata(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取异常元数据
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.UnifyResultContext.IsSkipSucceedUnifyHandler(Microsoft.AspNetCore.Mvc.ActionContext,Hx.Core.IUnifyResultProvider@,System.Boolean)">
            <summary>
            是否跳过成功返回结果规范处理（状态码 200~209 ）
            </summary>
            <param name="context"></param>
            <param name="unifyResultProvider"></param>
            <param name="isWebRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.UnifyResultContext.IsSkipUnifyHandler(Microsoft.AspNetCore.Mvc.ActionContext,Hx.Core.IUnifyResultProvider@,System.Boolean)">
            <summary>
            是否跳过规范化处理（包括任意状态：成功，失败或其他状态码）
            </summary>
            
            <param name="context"></param>
            <param name="unifyResult"></param>
            <param name="isWebRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.UnifyResultContext.IsSkipUnifyHandler(Microsoft.AspNetCore.Http.HttpContext,Hx.Core.IUnifyResultProvider@)">
            <summary>
            是否跳过特定状态码规范化处理（如，处理 401，403 状态码情况）
            </summary>
            <param name="context"></param>
            <param name="unifyResult"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.UnifyResultContext.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.Extensions.HttpContextExtensions">
            <summary>
            HttpContext扩展类
            </summary>
        </member>
        <member name="M:Hx.Core.Extensions.HttpContextExtensions.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.Extensions.HttpContextExtensions.GetControllerActionDescriptor(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 控制器/Action 描述器
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.Extensions.HttpContextExtensions.GetLocalIpAddressToIPv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取本机 IPv4地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.Extensions.HttpContextExtensions.GetLocalIpAddressToIPv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取本机 IPv6地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.Extensions.HttpContextExtensions.GetRemoteIpAddressToIPv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取远程 IPv4地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.Extensions.HttpContextExtensions.GetRemoteIpAddressToIPv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取远程 IPv6地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.Extensions.HttpContextExtensions.GetRequestUrlAddress(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取完整请求地址
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.Extensions.HttpContextExtensions.GetRefererUrlAddress(Microsoft.AspNetCore.Http.HttpRequest,System.String)">
            <summary>
            获取来源地址
            </summary>
            <param name="request"></param>
            <param name="refererHeaderKey"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.HxHttpClient">
            <summary>
            HxHttpClient实现类
            </summary>
        </member>
        <member name="M:Hx.Core.HxHttpClient.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger{Hx.Core.HxHttpClient})">
            <summary>
            构造函数
            </summary>
            <param name="client"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Hx.Core.HxHttpClient.GetAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Func{System.String,``0})">
            <inheritdoc cref="M:Hx.Core.IHxHttpClient.GetAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Func{System.String,``0})"/>
        </member>
        <member name="M:Hx.Core.HxHttpClient.PostAsync``1(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Func{System.Object,System.Net.Http.HttpContent},System.Func{System.String,``0})">
            <inheritdoc cref="M:Hx.Core.IHxHttpClient.PostAsync``1(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Func{System.Object,System.Net.Http.HttpContent},System.Func{System.String,``0})"/>
        </member>
        <member name="M:Hx.Core.HxHttpClient.CallRequestAsync``1(System.Func{System.Net.Http.HttpClient,System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}},System.Collections.Generic.Dictionary{System.String,System.String},System.Func{System.String,``0})">
            <summary>
            发送请求
            </summary>
            <param name="operation"></param>
            <param name="headers"></param>
            <param name="resultFunc"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.IHxHttpClient">
            <summary>
            HxHttpClient帮助类
            </summary>
        </member>
        <member name="M:Hx.Core.IHxHttpClient.GetAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Func{System.String,``0})">
            <summary>
            发送Get请求
            </summary>
            <param name="url">请求地址</param>
            <param name="headers">请求Headers</param>
            <param name="resultFunc">自定义结果处理函数</param>
            <typeparam name="TResult">返回值类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.IHxHttpClient.PostAsync``1(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Func{System.Object,System.Net.Http.HttpContent},System.Func{System.String,``0})">
            <summary>
            发送Post请求
            </summary>
            <param name="url">请求地址</param>
            <param name="data">请求参数</param>
            <param name="headers">请求Headers</param>
            <param name="contentFunc">自定义输入参数格式处理函数,默认使用Json格式处理</param>
            <param name="resultFunc">自定义结果处理函数</param>
            <typeparam name="TResult">返回值类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.HxClaimTypes">
            <summary>
            自定义声明
            </summary>
        </member>
        <member name="F:Hx.Core.HxClaimTypes.Ids4Name">
            <summary>
            IdentityServer4的name claim
            </summary>
        </member>
        <member name="F:Hx.Core.HxClaimTypes.Jti">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4    
            </summary>
        </member>
        <member name="T:Hx.Core.HxClaimValues">
            <summary>
            Claim的常量值
            </summary>
        </member>
        <member name="F:Hx.Core.HxClaimValues.SuperAdmin">
            <summary>
            超级管理员
            </summary>
        </member>
        <member name="F:Hx.Core.HxClaimValues.Admin">
            <summary>
            管理员的值
            </summary>
        </member>
        <member name="T:Hx.Core.IUserContext">
            <summary>
            HttpContext的一个管理类
            </summary>
        </member>
        <member name="P:Hx.Core.IUserContext.HttpContext">
            <summary>
            Http上下文
            </summary>
        </member>
        <member name="P:Hx.Core.IUserContext.IsAuthenticated">
            <summary>
            是否已授权
            </summary>
        </member>
        <member name="P:Hx.Core.IUserContext.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Hx.Core.IUserContext.IsSuperAdmin">
            <summary>
            是否是超级管理员，判断角色中是否包含SuperAdmin的声明
            </summary>
        </member>
        <member name="P:Hx.Core.IUserContext.IsAdmin">
            <summary>
            是否是管理员，判断角色中是否包含Admin的声明
            </summary>
        </member>
        <member name="P:Hx.Core.IUserContext.JwtId">
            <summary>
            用户的id，取的jti
            </summary>
        </member>
        <member name="P:Hx.Core.IUserContext.UserId">
            <summary>
            用户的id,取的ClaimTypes.NameIdentifier值
            </summary>
        </member>
        <member name="M:Hx.Core.IUserContext.SetCookieValue(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            设置cookie的值
            </summary>
            <param name="cookieName">cookie的名称</param>
            <param name="value">cookie的值</param>
            <param name="expires">过期时间</param>
        </member>
        <member name="M:Hx.Core.IUserContext.GetCookieValue(System.String)">
            <summary>
            获取cookie的值
            </summary>
            <param name="cookieName">cookie的键</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.IUserContext.GetClaimValueByType(System.String)">
            <summary>
            根据claim获取相应的值
            </summary>
            <param name="ClaimType">声明</param>
            <returns></returns>
        </member>
        <member name="T:Hx.Core.IWebManager">
            <summary>
            Web管理类
            </summary>
        </member>
        <member name="P:Hx.Core.IWebManager.WebRootPath">
            <summary>
            web应用程序根路径
            </summary>
        </member>
        <member name="P:Hx.Core.IWebManager.ContentRootPath">
            <summary>
            web应用程序根路径
            </summary>
        </member>
        <member name="M:Hx.Core.IWebManager.ToRelativePath(System.String)">
            <summary>
            把绝对路径转换成相对路径
            </summary>
            <param name="absolutePath">绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.IWebManager.ToAbsolutePath(System.String)">
            <summary>
            把相对路径转换成绝对路径
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Core.IWebManager.GetFullUrl(System.String,System.String)">
            <summary>
            获取路由的全路径
            </summary>
            <param name="host">网站host</param>
            <param name="routeUrl"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions">
            <summary>
            应用中间件拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseHxApp(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            添加应用中间件
            </summary>
            <param name="app">应用构建器</param>
            <param name="configure">应用配置</param>
            <returns>应用构建器</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.WebApplicationBuilderExtension">
            <summary>
            WebApplication构建器扩展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.WebApplicationBuilderExtension.ConfigureHxWebApp(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Web 应用注入
            </summary>
            <param name="webApplicationBuilder">Web应用构建器</param>
            <returns>WebApplicationBuilder</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.WebHostBuilderExtensions">
            <summary>
            主机构建器拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.WebHostBuilderExtensions.ConfigureHxWebApp(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            Web 主机配置
            </summary>
            <param name="webHostBuilder">Web主机构建器</param>
            <returns>IWebHostBuilder</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.WebHostBuilderExtensions.ConfigureHxWebAppConfiguration(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Web主机配置Configuration
            </summary>
            <param name="webHostBuilder">泛型主机注入构建器</param>
            <param name="configureDelegate">配置对象</param>
            <returns>IHostBuilder</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.CorsAccessorApplicationBuilderExtensions">
            <summary>
            跨域中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.CorsAccessorApplicationBuilderExtensions.UseCorsAccessor(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            添加跨域中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.SwaggerDocumentApplicationBuilderExtensions">
            <summary>
            规范化文档swagger中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerDocumentApplicationBuilderExtensions.UseSwaggerDocuments(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            添加规范化文档中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerDocumentApplicationBuilderExtensions.UseSwaggerKnife4jDocuments(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            添加规范化文档中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.UnifyResultMiddlewareExtensions">
            <summary>
            状态码中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.UnifyResultMiddlewareExtensions.UseUnifyResultStatusCodes(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            添加状态码拦截中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpContextExtensions">
            <summary>
            Http 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetControllerActionDescriptor(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 控制器/Action 描述器
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SigninToSwagger(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            设置规范化文档自动登录
            </summary>
            <param name="httpContext"></param>
            <param name="accessToken"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SignoutToSwagger(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            设置规范化文档退出登录
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SetTokensOfResponseHeaders(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String)">
            <summary>
            设置响应头 Tokens
            </summary>
            <param name="httpContext"></param>
            <param name="accessToken"></param>
            <param name="refreshToken"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetLocalIpAddressToIPv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取本机 IPv4地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetLocalIpAddressToIPv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取本机 IPv6地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRemoteIpAddressToIPv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取远程 IPv4地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRemoteIpAddressToIPv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取远程 IPv6地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRequestUrlAddress(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取完整请求地址
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRefererUrlAddress(Microsoft.AspNetCore.Http.HttpRequest,System.String)">
            <summary>
            获取来源地址
            </summary>
            <param name="request"></param>
            <param name="refererHeaderKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.ReadBodyContentAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            读取 Body 内容
            </summary>
            <param name="httpContext"></param>
            <remarks>需先在 Startup 的 Configure 中注册 app.EnableBuffering()</remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.ReadBodyContentAsync(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            读取 Body 内容
            </summary>
            <param name="request"></param>
            <remarks>需先在 Startup 的 Configure 中注册 app.EnableBuffering()</remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,Hx.Core.FriendlyException.BadPageResult,System.Threading.CancellationToken)">
            <summary>
            将 <see cref="T:Hx.Core.FriendlyException.BadPageResult"/> 写入响应流中
            </summary>
            <param name="httpResponse"><see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/></param>
            <param name="badPageResult"><see cref="T:Hx.Core.FriendlyException.BadPageResult"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.IsWebSocketRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是 WebSocket 请求
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter">
            <summary>
            友好异常拦截器
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter.#ctor(System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异步异常的处理
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.Filters.UnifyResultFilterAttribute">
            <summary>
            规范化结构（请求成功）过滤器
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Filters.UnifyResultFilterAttribute.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)">
            <summary>
            执行结果
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.UnifyResultAttribute">
            <summary>
            规范化结果配置
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="statusCode"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.#ctor(System.Type,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.WrapType(System.Type)">
            <summary>
            包装类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions">
            <summary>
            应用服务集合拓展类（由框架内部调用）
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddWebHostApp(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            添加Web应用配置
            </summary>
            <param name="services">服务集合</param>
            <param name="config">配置文件</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddHostApp(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            添加主机应用配置
            </summary>
            <param name="services">服务集合</param>
            <param name="configure">服务配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ConfigurableOptionsServiceCollectionExtensions">
            <summary>
            可变选项服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ConfigurableOptionsServiceCollectionExtensions.AddConfigureOptions``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加选项配置，放在AddAppSettings之后
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ConfigurableOptionsServiceCollectionExtensions.AddConfigureOptions``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加选项配置，放在AddAppSettings之后
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep"></typeparam>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ConfigurableOptionsServiceCollectionExtensions.GetOptionsJsonKey(Hx.Core.OptionsRuleAttribute,System.Type)">
            <summary>
            获取选项键
            </summary>
            <param name="optionsSettings">选项配置特性</param>
            <param name="optionsType">选项类型</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.MvcBuilderServiceCollectionExtensions">
            <summary>
            Mvc 服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MvcBuilderServiceCollectionExtensions.AddMvcFilter``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <typeparam name="TFilter"></typeparam>
            <param name="mvcBuilder"></param>
            <param name="extraConfigure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MvcBuilderServiceCollectionExtensions.AddMvcFilter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <typeparam name="TFilter"></typeparam>
            <param name="services"></param>
            <param name="extraConfigure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CorsAccessorServiceCollectionExtensions">
            <summary>
            跨域访问服务拓展类
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.CorsAccessorServiceCollectionExtensions._defaultExposedHeaders">
            <summary>
            默认跨域导出响应头 Key
            </summary>
            <remarks>解决 ajax，XMLHttpRequest，axios 不能获取请求头问题</remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CorsAccessorServiceCollectionExtensions.AddCorsAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions})">
            <summary>
            配置跨域
            </summary>
            <param name="services">服务集合</param>
            <param name="corsOptionsHandler"></param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions">
             <summary>
            使用.Net Core原生的依赖注入进行 依赖注入的拓展类
             </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.AddNativeDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            使用.Net Core自带的DI添加依赖注入接口
            </summary>
            <param name="services">服务集合</param>
            <param name="types">依赖注入的类型集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.AddScanDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            添加扫描注入
            </summary>
            <param name="services">服务集合</param>
            <param name="effectiveTypes"></param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.RegisterService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,Hx.Common.DependencyInjection.InjectionAttribute,System.Collections.Generic.IEnumerable{System.Type},Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.DependencyInjectionType)">
            <summary>
            注册服务
            </summary>
            <param name="services">服务集合</param>
            <param name="type">类型</param>
            <param name="injectionAttribute">注入特性</param>
            <param name="canInjectInterfaces">能被注册的接口</param>
            <param name="registerType"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.RegisterType(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.DependencyInjectionType,System.Type,System.Type)">
            <summary>
            注册类型
            </summary>
            <param name="services">服务</param>
            <param name="registerType">注册类型</param>
            <param name="type">类型</param>
            <param name="inter">接口</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.RegisterTransientType(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)">
            <summary>
            注册瞬时接口实例类型
            </summary>
            <param name="services">服务</param>
            <param name="type">类型</param>
            <param name="inter">接口</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.RegisterScopeType(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)">
            <summary>
            注册作用域接口实例类型
            </summary>
            <param name="services">服务</param>
            <param name="type">类型</param>
            <param name="inter">接口</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.RegisterSingletonType(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)">
            <summary>
            注册单例接口实例类型
            </summary>
            <param name="services">服务</param>
            <param name="type">类型</param>
            <param name="inter">接口</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.RegisterNamed(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册命名服务
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.FixedGenericType(System.Type)">
            <summary>
            修复泛型类型注册类型问题
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.GetDependencyType(System.Type)">
            <summary>
            获取 注册 排序
            </summary>
            <param name="type">排序类型</param>
            <returns>int</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.GetOrder(System.Type)">
            <summary>
            获取 注册 排序
            </summary>
            <param name="type">排序类型</param>
            <returns>int</returns>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.TypeNamedCollection">
            <summary>
            类型名称集合
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.DependencyInjectionType">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.DependencyInjectionType.Transient">
            <summary>
            瞬时
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.DependencyInjectionType.Scoped">
            <summary>
            作用域
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.NativeDependencyInjectionServiceCollectionExtensions.DependencyInjectionType.Singleton">
            <summary>
            单例
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions">
            <summary>
            友好异常服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Boolean)">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <typeparam name="TGlobalExceptionHandler">异常错误码处理器</typeparam>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="enabledGlobalExceptionFilter">是否启用全局异常过滤器</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Boolean)">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="enabledGlobalExceptionFilter">是否启用全局异常过滤器</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <typeparam name="TGlobalExceptionHandler">异常错误码处理器</typeparam>
            <param name="services"></param>
            <param name="enabledGlobalExceptionFilter">是否启用全局异常过滤器</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <param name="services"></param>
            <param name="enabledGlobalExceptionFilter">是否启用全局异常过滤器</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SwaggerDocumentServiceCollectionExtensions">
            <summary>
            规范化接口服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerDocumentServiceCollectionExtensions.AddSwaggerDocuments(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加规范化文档服务
            </summary>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions">
            <summary>
            规范化结果服务拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加规范化结果服务
            </summary>
            <param name="mvcBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加规范化结果服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加规范化结果服务
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="mvcBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加规范化结果服务
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.WebServiceCollectionExtensions">
            <summary>
            Web相关的拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.WebServiceCollectionExtensions.AddUserContext(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加UserContent,可以获取用户信息
            操作cookie
            使用时只需要在构造函数注入IUserContext即可
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.WebServiceCollectionExtensions.AddWebManager(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加web管理类用于一些路径的处理
            使用时只需要在构造函数注入IWebManager即可
            </summary>
            <param name="services">服务</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.WebServiceCollectionExtensions.AddHxHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加HttpClient，进行远程请求
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:Microsoft.Extensions.Hosting.HostBuilderExtensions">
            <summary>
            主机构建器拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.ConfigureHxWebHostDefaults(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.AspNetCore.Hosting.IWebHostBuilder})">
            <summary>
            用预先配置的默认值初始化类的新实例<see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>
            注意，使用此扩展方法后代替ConfigureWebHostDefaults会自动配置IWebHostBuilder的ConfigureHxWebApp
            </summary>
            <remarks>
               以下默认值应用于<see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>:
               使用Kestrel作为web服务器并使用应用程序的配置提供商来配置它，
               添加HostFiltering中间件，
               如果ASPNETCORE_FORWARDEDHEADERS_ENABLED=true则添加ForwardedHeaders中间件，
               并启用IIS集成。
            </remarks> 
            <param name="hostBuilder">泛型主机注入构建器</param>
            <param name="configure">配置回调</param>
            <returns>IHostBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.ConfigureHxApp(Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            泛型主机配置
            </summary>
            <param name="hostBuilder">泛型主机注入构建器</param>
            <returns>IHostBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.ConfigureHxAppConfiguration(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            泛型主机配置Configuration
            </summary>
            <param name="hostBuilder">泛型主机注入构建器</param>
            <param name="configureDelegate">配置对象</param>
            <returns>IHostBuilder</returns>
        </member>
        <member name="T:Microsoft.Extensions.Hosting.GenericHostLifetimeEventsHostedService">
            <summary>
            监听泛型主机启动事件
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.GenericHostLifetimeEventsHostedService.#ctor(Microsoft.Extensions.Hosting.IHost)">
            <summary>
            构造函数
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.GenericHostLifetimeEventsHostedService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            监听主机启动
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.GenericHostLifetimeEventsHostedService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            监听主机停止
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
    </members>
</doc>
